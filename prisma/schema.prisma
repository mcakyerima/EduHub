// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = "postgres://avnadmin:AVNS_VobyLjwpnPTUwCIKIYQ@pg-136499e9-mcakyerima-87d7.a.aivencloud.com:15957/defaultdb?sslmode=require"
  relationMode = "prisma"
}

// Define a User model
model User {
  id       Int    @id @default(autoincrement())
  username String
  email    String @unique
}

// Define a Course model
model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters   Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([categoryId])
}

// Category Model
model Category {
  id     String   @id @default(uuid())
  name   String   @unique
  course Course[]
}

// Attachment Model
model Attachment {
  id       String @id @default(uuid())
  name     String
  url      String @db.Text
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// creating chapters schema for course chapter and progress track
model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id      String    @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields:  [chapterId], references: [id], onDelete: Cascade)
}

// User progress model for keeping track of user progress
model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

// purchase model for keeping track of user purchases
model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// Schema for stripe customers
model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}